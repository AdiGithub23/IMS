@page "/addproduct"
@using IMS.UseCases.Products;
@using IMS.UseCases.Products.interfaces

@rendermode InteractiveServer
@inject IAddProductUseCase AddProductUseCase
@inject NavigationManager NavigationManager

<h3>Add Product</h3>
<br />
<EditForm Model="product" OnValidSubmit="SaveProduct">

    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Product Name</label>
        <InputText id="name" class="form-control" @bind-Value="product.ProductName" />
    </div>

    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="name" class="form-control" @bind-Value="product.Quantity" />
    </div>

    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="name" class="form-control" @bind-Value="product.Price" />
    </div>

    <br />

    <button type="submit" class="btn btn-outline-primary">Save</button>
    <button type="button" class="btn btn-outline-primary" @onclick="Cancel">Cancel</button>
</EditForm>


@code {
    private Product product = new Product();

    private async Task SaveProduct()
    {
        await AddProductUseCase.ExecuteAsync(product);
        NavigationManager.NavigateTo("/products");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/products");
    }

    // private async Task HandleFileSelected(InputFileChangeEventArgs e)
    // {
    //     var file = e.File;
    //     if (file != null)
    //     {
    //         var buffer = new byte[file.Size];
    //         await file.OpenReadStream().ReadAsync(buffer);
    //         product.ProdImgUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
    //     }
    // }


}
